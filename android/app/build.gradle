plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.waz.wazplay"

    compileSdkVersion 35

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.waz.wazplay"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    // buildTypes {
    //     release {
    //         // TODO: Add your own signing config for the release build.
    //         // Signing with the debug keys for now, so `flutter run --release` works.
    //         signingConfig signingConfigs.debug
    //     }
    // }

       signingConfigs {
       release {
        //    keyAlias keystoreProperties['keyAlias']
        //    keyPassword keystoreProperties['keyPassword']
        //    storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
        //    storePassword keystoreProperties['storePassword']
            storeFile file('key.properties') // Path relative to the app module dir
            storePassword System.getenv("ANDROID_KEYSTORE_STORE_PASSWORD") ?: keyProperties['storePassword']
            keyAlias System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_ALIAS") ?: keyProperties['keyAlias']
            keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD") ?: keyProperties['keyPassword']
       }

        def keystoreProperties = new Properties()
        def keystorePropertiesFile = rootProject.file('key.properties') // Path relative to the root android dir
        if (keystorePropertiesFile.exists()) {
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        }
   }
   buildTypes {
       release {
           signingConfig signingConfigs.release
       }
   }
}

flutter {
    source '../..'
}

dependencies {
}
