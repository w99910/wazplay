# 1. Workflow Name (Optional Change)
name: Build and Release Flutter Android APK on Release Branch Push

# 2. Trigger remains on push to 'release' branch (as requested)
# NOTE: Triggering releases on tag pushes (e.g., 'v*.*.*') is generally recommended
# for better version control and avoiding duplicate release attempts.
on:
  push:
    branches:
      - release

jobs:
  build_android:
    name: Build Flutter Android Release APK
    runs-on: ubuntu-latest
    environment: release_build # Uses secrets from 'release_build' environment

    # 3. Add Permissions: Needed to create releases/tags
    permissions:
      contents: write

    steps:
      # --- Existing Steps (Unchanged) ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Decode Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $KEYSTORE_BASE64 | base64 --decode > android/app/upload-keystore.jks

      - name: Create key.properties
        env:
          KEY_ALIAS: ${{ secrets.ANDROID_KEYSTORE_PRIVATE_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_STORE_PASSWORD }}
        run: |
          echo "storePassword=$STORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Build Release APK
        run: flutter build apk --release

      # --- New/Modified Steps for GitHub Release ---

      # 8. Get App Version from pubspec.yaml
      # This step reads the version line and makes it available for the next step
      - name: Get App Version
        id: app_version # Give the step an ID to reference its output
        run: echo "version=$(grep 'version:' pubspec.yaml | awk '{print $2}')" >> $GITHUB_OUTPUT

      # 9. Create GitHub Release and Upload APK Asset
      # This uses the version from the previous step for the tag and release name
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Essential for authentication
        with:
          # The file(s) to upload as release assets
          files: build/app/outputs/flutter-apk/app-release.apk
          # Create a tag based on the version in pubspec.yaml (e.g., v1.0.0)
          # The action creates the tag if it doesn't exist
          tag_name: v${{ steps.app_version.outputs.version }}
          # Name the release using the version (e.g., "Release v1.0.0")
          name: Release v${{ steps.app_version.outputs.version }}
          # Optional: Add more detailed release notes if desired
          body: "Automated release build based on version v${{ steps.app_version.outputs.version }} from pubspec.yaml, triggered by push to release branch."
          # Mark as a full release
          draft: false
          prerelease: false

      # 10. Upload the generated APK as a Workflow Artifact (Optional)
      # Keep this if you still want the temporary artifact besides the permanent Release asset
      - name: Upload Release APK Artifact (Optional)
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-${{ github.sha }}
          path: build/app/outputs/flutter-apk/app-release.apk